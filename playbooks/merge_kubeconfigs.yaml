---
- name: Read each kubeconfig file
  slurp:
    src: "{{ playbook_dir | dirname }}/files/tmp/{{ item.rke2_cluster_name }}-kubeconfig"
  register: kubeconfig_contents

- name: Decode kubeconfig and convert to a dictionary
  set_fact:
    new_kubeconfig: "{{ kubeconfig_contents.content | b64decode | from_yaml }}"

- name: Check if merged-kubeconfig exists
  stat:
    path: "{{ playbook_dir | dirname }}/files/tmp/merged-kubeconfig"
  register: merged_kubeconfig_status

- name: Create empty kubeconfig file if it doesn't exist
  copy:
    dest: "{{ playbook_dir | dirname }}/files/tmp/merged-kubeconfig"
    content: |
      apiVersion: v1
      kind: Config
      clusters: []
      contexts: []
      users: []
  when: not merged_kubeconfig_status.stat.exists

- name: Read merged kubeconfig
  slurp:
    src: "{{ playbook_dir | dirname }}/files/tmp/merged-kubeconfig"
  register: encoded_merged_kubeconfig

- name: Decode merged kubeconfig
  set_fact:
    merged_kubeconfig: "{{ encoded_merged_kubeconfig.content | b64decode | from_yaml }}"

- name: Merge clusters, contexts, and users from new kubeconfig into merged kubeconfig
  set_fact:
    merged_kubeconfig: >
      {{
        merged_kubeconfig |
        combine({
          'clusters': merged_kubeconfig['clusters'] + new_kubeconfig['clusters'],
          'contexts': merged_kubeconfig['contexts'] + new_kubeconfig['contexts'],
          'users': merged_kubeconfig['users'] + new_kubeconfig['users']
        }, recursive=True)
      }}

- name: Save the merged kubeconfig to file with proper indentation
  copy:
    dest: "{{ playbook_dir | dirname }}/files/tmp/merged-kubeconfig"
    content: "{{ merged_kubeconfig | to_nice_yaml(indent=2) }}"
